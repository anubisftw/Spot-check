{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "private_outputs": true,
      "machine_shape": "hm"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU",
    "gpuClass": "premium"
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "-P_qreJdUS6m"
      },
      "outputs": [],
      "source": [
        "!pip install keras-tuner\n",
        "!pip install opendatasets\n",
        "!pip install scikit-learn\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import opendatasets as od\n",
        "import pandas\n",
        "import tensorflow as tf\n",
        "import numpy as np\n",
        "from tensorflow.keras import regularizers\n",
        "import random\n",
        "from tensorflow.keras.optimizers import Adam\n",
        "from tensorflow.keras.losses import CategoricalCrossentropy\n",
        "from keras.callbacks import EarlyStopping\n",
        "from keras.utils import np_utils\n",
        "from tensorflow.keras.layers import Dense, Conv2D, Activation, Dropout, GlobalAveragePooling2D\n",
        "from tensorflow.keras.layers import RandomFlip, RandomRotation, Resizing\n",
        "from tensorflow.keras.models import Sequential\n",
        "import tensorflow.keras.applications.mobilenet\n",
        "import os\n",
        "import matplotlib.pyplot as plt\n",
        "from tensorflow.keras.regularizers import l2"
      ],
      "metadata": {
        "id": "uclHoY1mUWH0"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "##create train, val, test set from googel drive folder"
      ],
      "metadata": {
        "id": "pEGnuOTmQLbE"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "train_ds = tf.keras.preprocessing.image_dataset_from_directory(\n",
        "    '/content/drive/MyDrive/Colab Notebooks/labeled_images/train',\n",
        "    labels='inferred',\n",
        "    label_mode='categorical',\n",
        "    image_size=(256,256),\n",
        "    batch_size=32,\n",
        "    shuffle=True,\n",
        "    seed=42\n",
        ")\n",
        "# Create the validation dataset\n",
        "validation_ds = tf.keras.preprocessing.image_dataset_from_directory(\n",
        "    '/content/drive/MyDrive/Colab Notebooks/labeled_images/validation',\n",
        "    labels='inferred',\n",
        "    label_mode='categorical',\n",
        "    image_size=(256,256),\n",
        "    batch_size=32,\n",
        "    shuffle=True,\n",
        "    seed=42\n",
        ")\n",
        "\n",
        "# Create the test dataset\n",
        "test_ds = tf.keras.preprocessing.image_dataset_from_directory(\n",
        "    '/content/drive/MyDrive/Colab Notebooks/labeled_images/test',\n",
        "    labels='inferred',\n",
        "    label_mode='categorical',\n",
        "    image_size=(256,256),\n",
        "    batch_size=32,\n",
        "    shuffle=True,\n",
        "    seed=42\n",
        ")"
      ],
      "metadata": {
        "id": "dPbBPMuNUjjA"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "IMG_SIZE = 256\n",
        "\n",
        "# create data augmentation sequence\n",
        "data_augmentating = tf.keras.Sequential([\n",
        "    Resizing(224, 224, interpolation='bilinear', crop_to_aspect_ratio=False),\n",
        "    RandomFlip('horizontal_and_vertical'),\n",
        "    RandomRotation(0.3),\n",
        "])\n",
        "\n",
        "# mobilenetv2 preprocessor\n",
        "mobilnet_preprocessor = tf.keras.applications.mobilenet_v2.preprocess_input\n",
        "\n",
        "# define base model\n",
        "base_model = tf.keras.applications.MobileNetV2(input_shape= (224,224,3), include_top=False, weights='imagenet')\n",
        "x = Dropout(0.6)(x)\n",
        "prediction_layer = Dense(8, activation = 'softmax')\n",
        "global_average_layer = GlobalAveragePooling2D()\n",
        "\n"
      ],
      "metadata": {
        "id": "jHOfWEFQUypc"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "inputs = tf.keras.Input(shape=(IMG_SIZE, IMG_SIZE, 3))\n",
        "x = data_augmentating(inputs)\n",
        "x = mobilnet_preprocessor(x)\n",
        "x = base_model(x, training=False)\n",
        "x = Conv2D(8, 1, padding='same', activation='relu', kernel_regularizer=l2(0.01))(x)\n",
        "x = global_average_layer(x)\n",
        "outputs = prediction_layer(x)\n",
        "model = tf.keras.Model(inputs, outputs)\n",
        "\n"
      ],
      "metadata": {
        "id": "D9cjLxLMVOag"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model.summary()"
      ],
      "metadata": {
        "id": "1GdYyv_PVT6n"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model.compile(\n",
        "    optimizer=Adam(learning_rate=0.00001),         # lr = learning_rate\n",
        "    loss='categorical_crossentropy',   # Multi-class classification\n",
        "    metrics=['accuracy']  \n",
        "\n",
        "\n",
        "    \n",
        ")\n",
        "\n"
      ],
      "metadata": {
        "id": "Jde3yswZbnJ8"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "history = model.fit(train_ds, epochs=30, validation_data=validation_ds)"
      ],
      "metadata": {
        "id": "kcyTAumwY7Hz"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# plot test/val acc and loss"
      ],
      "metadata": {
        "id": "MganGtJlg7HU"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "acc = history.history['accuracy']\n",
        "val_acc = history.history['val_accuracy']\n",
        "loss = history.history['loss']\n",
        "val_loss = history.history['val_loss']\n",
        "\n",
        "epochs_range = range(30)\n",
        "\n",
        "plt.figure(figsize=(8, 8))\n",
        "plt.subplot(2, 1, 1)\n",
        "plt.plot(epochs_range, acc, label='Training Accuracy')\n",
        "plt.plot(epochs_range, val_acc, label='Validation Accuracy')\n",
        "plt.legend(loc='lower right')\n",
        "plt.title('Training and Validation Accuracy')\n",
        "\n",
        "plt.subplot(2, 1, 2)\n",
        "plt.plot(epochs_range, loss, label='Training Loss')\n",
        "plt.plot(epochs_range, val_loss, label='Validation Loss')\n",
        "plt.legend(loc='upper right')\n",
        "plt.title('Training and Validation Loss')\n",
        "plt.xlabel('Epoch')\n",
        "plt.ylabel('Accuracy/Loss')\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "-jMX67BEujPM"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Evaluate the model on the validation set\n",
        "loss, accuracy = model.evaluate(validation_ds)\n",
        "\n",
        "print('Validation loss:', loss)\n",
        "print('Validation accuracy:', accuracy)"
      ],
      "metadata": {
        "id": "DgUyk8hVHXkv"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Evaluate the model on the test set\n",
        "loss, accuracy = model.evaluate(test_ds)\n",
        "\n",
        "print('Test loss:', loss)\n",
        "print('Test accuracy:', accuracy)"
      ],
      "metadata": {
        "id": "oAv7L41ZHyXp"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "qsSjQCGmkUig"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
